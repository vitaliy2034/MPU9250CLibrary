
MPU9250_class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08000e4c  08000e4c  00010e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ecc  08000ecc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000ecc  08000ecc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ecc  08000ecc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ecc  08000ecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ed0  08000ed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08000f38  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08000f38  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000026c1  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000081d  00000000  00000000  0002274d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000148  00000000  00000000  00022f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000f0  00000000  00000000  000230b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000098be  00000000  00000000  000231a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001c02  00000000  00000000  0002ca66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00030fcc  00000000  00000000  0002e668  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0005f634  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c8  00000000  00000000  0005f6b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000e34 	.word	0x08000e34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08000e34 	.word	0x08000e34

08000108 <__aeabi_fdiv>:
 8000108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800010a:	4657      	mov	r7, sl
 800010c:	464e      	mov	r6, r9
 800010e:	4645      	mov	r5, r8
 8000110:	46de      	mov	lr, fp
 8000112:	0244      	lsls	r4, r0, #9
 8000114:	b5e0      	push	{r5, r6, r7, lr}
 8000116:	0046      	lsls	r6, r0, #1
 8000118:	4688      	mov	r8, r1
 800011a:	0a64      	lsrs	r4, r4, #9
 800011c:	0e36      	lsrs	r6, r6, #24
 800011e:	0fc7      	lsrs	r7, r0, #31
 8000120:	2e00      	cmp	r6, #0
 8000122:	d063      	beq.n	80001ec <__aeabi_fdiv+0xe4>
 8000124:	2eff      	cmp	r6, #255	; 0xff
 8000126:	d024      	beq.n	8000172 <__aeabi_fdiv+0x6a>
 8000128:	2380      	movs	r3, #128	; 0x80
 800012a:	00e4      	lsls	r4, r4, #3
 800012c:	04db      	lsls	r3, r3, #19
 800012e:	431c      	orrs	r4, r3
 8000130:	2300      	movs	r3, #0
 8000132:	4699      	mov	r9, r3
 8000134:	469b      	mov	fp, r3
 8000136:	3e7f      	subs	r6, #127	; 0x7f
 8000138:	4643      	mov	r3, r8
 800013a:	4642      	mov	r2, r8
 800013c:	025d      	lsls	r5, r3, #9
 800013e:	0fd2      	lsrs	r2, r2, #31
 8000140:	005b      	lsls	r3, r3, #1
 8000142:	0a6d      	lsrs	r5, r5, #9
 8000144:	0e1b      	lsrs	r3, r3, #24
 8000146:	4690      	mov	r8, r2
 8000148:	4692      	mov	sl, r2
 800014a:	d065      	beq.n	8000218 <__aeabi_fdiv+0x110>
 800014c:	2bff      	cmp	r3, #255	; 0xff
 800014e:	d055      	beq.n	80001fc <__aeabi_fdiv+0xf4>
 8000150:	2280      	movs	r2, #128	; 0x80
 8000152:	2100      	movs	r1, #0
 8000154:	00ed      	lsls	r5, r5, #3
 8000156:	04d2      	lsls	r2, r2, #19
 8000158:	3b7f      	subs	r3, #127	; 0x7f
 800015a:	4315      	orrs	r5, r2
 800015c:	1af6      	subs	r6, r6, r3
 800015e:	4643      	mov	r3, r8
 8000160:	464a      	mov	r2, r9
 8000162:	407b      	eors	r3, r7
 8000164:	2a0f      	cmp	r2, #15
 8000166:	d900      	bls.n	800016a <__aeabi_fdiv+0x62>
 8000168:	e08d      	b.n	8000286 <__aeabi_fdiv+0x17e>
 800016a:	486d      	ldr	r0, [pc, #436]	; (8000320 <__aeabi_fdiv+0x218>)
 800016c:	0092      	lsls	r2, r2, #2
 800016e:	5882      	ldr	r2, [r0, r2]
 8000170:	4697      	mov	pc, r2
 8000172:	2c00      	cmp	r4, #0
 8000174:	d154      	bne.n	8000220 <__aeabi_fdiv+0x118>
 8000176:	2308      	movs	r3, #8
 8000178:	4699      	mov	r9, r3
 800017a:	3b06      	subs	r3, #6
 800017c:	26ff      	movs	r6, #255	; 0xff
 800017e:	469b      	mov	fp, r3
 8000180:	e7da      	b.n	8000138 <__aeabi_fdiv+0x30>
 8000182:	2500      	movs	r5, #0
 8000184:	4653      	mov	r3, sl
 8000186:	2902      	cmp	r1, #2
 8000188:	d01b      	beq.n	80001c2 <__aeabi_fdiv+0xba>
 800018a:	2903      	cmp	r1, #3
 800018c:	d100      	bne.n	8000190 <__aeabi_fdiv+0x88>
 800018e:	e0bf      	b.n	8000310 <__aeabi_fdiv+0x208>
 8000190:	2901      	cmp	r1, #1
 8000192:	d028      	beq.n	80001e6 <__aeabi_fdiv+0xde>
 8000194:	0030      	movs	r0, r6
 8000196:	307f      	adds	r0, #127	; 0x7f
 8000198:	2800      	cmp	r0, #0
 800019a:	dd20      	ble.n	80001de <__aeabi_fdiv+0xd6>
 800019c:	076a      	lsls	r2, r5, #29
 800019e:	d004      	beq.n	80001aa <__aeabi_fdiv+0xa2>
 80001a0:	220f      	movs	r2, #15
 80001a2:	402a      	ands	r2, r5
 80001a4:	2a04      	cmp	r2, #4
 80001a6:	d000      	beq.n	80001aa <__aeabi_fdiv+0xa2>
 80001a8:	3504      	adds	r5, #4
 80001aa:	012a      	lsls	r2, r5, #4
 80001ac:	d503      	bpl.n	80001b6 <__aeabi_fdiv+0xae>
 80001ae:	0030      	movs	r0, r6
 80001b0:	4a5c      	ldr	r2, [pc, #368]	; (8000324 <__aeabi_fdiv+0x21c>)
 80001b2:	3080      	adds	r0, #128	; 0x80
 80001b4:	4015      	ands	r5, r2
 80001b6:	28fe      	cmp	r0, #254	; 0xfe
 80001b8:	dc03      	bgt.n	80001c2 <__aeabi_fdiv+0xba>
 80001ba:	01ac      	lsls	r4, r5, #6
 80001bc:	0a64      	lsrs	r4, r4, #9
 80001be:	b2c2      	uxtb	r2, r0
 80001c0:	e001      	b.n	80001c6 <__aeabi_fdiv+0xbe>
 80001c2:	22ff      	movs	r2, #255	; 0xff
 80001c4:	2400      	movs	r4, #0
 80001c6:	0264      	lsls	r4, r4, #9
 80001c8:	05d2      	lsls	r2, r2, #23
 80001ca:	0a60      	lsrs	r0, r4, #9
 80001cc:	07db      	lsls	r3, r3, #31
 80001ce:	4310      	orrs	r0, r2
 80001d0:	4318      	orrs	r0, r3
 80001d2:	bc3c      	pop	{r2, r3, r4, r5}
 80001d4:	4690      	mov	r8, r2
 80001d6:	4699      	mov	r9, r3
 80001d8:	46a2      	mov	sl, r4
 80001da:	46ab      	mov	fp, r5
 80001dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80001de:	2201      	movs	r2, #1
 80001e0:	1a10      	subs	r0, r2, r0
 80001e2:	281b      	cmp	r0, #27
 80001e4:	dd7c      	ble.n	80002e0 <__aeabi_fdiv+0x1d8>
 80001e6:	2200      	movs	r2, #0
 80001e8:	2400      	movs	r4, #0
 80001ea:	e7ec      	b.n	80001c6 <__aeabi_fdiv+0xbe>
 80001ec:	2c00      	cmp	r4, #0
 80001ee:	d11d      	bne.n	800022c <__aeabi_fdiv+0x124>
 80001f0:	2304      	movs	r3, #4
 80001f2:	4699      	mov	r9, r3
 80001f4:	3b03      	subs	r3, #3
 80001f6:	2600      	movs	r6, #0
 80001f8:	469b      	mov	fp, r3
 80001fa:	e79d      	b.n	8000138 <__aeabi_fdiv+0x30>
 80001fc:	3eff      	subs	r6, #255	; 0xff
 80001fe:	2d00      	cmp	r5, #0
 8000200:	d120      	bne.n	8000244 <__aeabi_fdiv+0x13c>
 8000202:	2102      	movs	r1, #2
 8000204:	4643      	mov	r3, r8
 8000206:	464a      	mov	r2, r9
 8000208:	407b      	eors	r3, r7
 800020a:	430a      	orrs	r2, r1
 800020c:	2a0f      	cmp	r2, #15
 800020e:	d8d8      	bhi.n	80001c2 <__aeabi_fdiv+0xba>
 8000210:	4845      	ldr	r0, [pc, #276]	; (8000328 <__aeabi_fdiv+0x220>)
 8000212:	0092      	lsls	r2, r2, #2
 8000214:	5882      	ldr	r2, [r0, r2]
 8000216:	4697      	mov	pc, r2
 8000218:	2d00      	cmp	r5, #0
 800021a:	d119      	bne.n	8000250 <__aeabi_fdiv+0x148>
 800021c:	2101      	movs	r1, #1
 800021e:	e7f1      	b.n	8000204 <__aeabi_fdiv+0xfc>
 8000220:	230c      	movs	r3, #12
 8000222:	4699      	mov	r9, r3
 8000224:	3b09      	subs	r3, #9
 8000226:	26ff      	movs	r6, #255	; 0xff
 8000228:	469b      	mov	fp, r3
 800022a:	e785      	b.n	8000138 <__aeabi_fdiv+0x30>
 800022c:	0020      	movs	r0, r4
 800022e:	f000 f8c7 	bl	80003c0 <__clzsi2>
 8000232:	2676      	movs	r6, #118	; 0x76
 8000234:	1f43      	subs	r3, r0, #5
 8000236:	409c      	lsls	r4, r3
 8000238:	2300      	movs	r3, #0
 800023a:	4276      	negs	r6, r6
 800023c:	1a36      	subs	r6, r6, r0
 800023e:	4699      	mov	r9, r3
 8000240:	469b      	mov	fp, r3
 8000242:	e779      	b.n	8000138 <__aeabi_fdiv+0x30>
 8000244:	464a      	mov	r2, r9
 8000246:	2303      	movs	r3, #3
 8000248:	431a      	orrs	r2, r3
 800024a:	4691      	mov	r9, r2
 800024c:	2103      	movs	r1, #3
 800024e:	e786      	b.n	800015e <__aeabi_fdiv+0x56>
 8000250:	0028      	movs	r0, r5
 8000252:	f000 f8b5 	bl	80003c0 <__clzsi2>
 8000256:	1f43      	subs	r3, r0, #5
 8000258:	1836      	adds	r6, r6, r0
 800025a:	409d      	lsls	r5, r3
 800025c:	3676      	adds	r6, #118	; 0x76
 800025e:	2100      	movs	r1, #0
 8000260:	e77d      	b.n	800015e <__aeabi_fdiv+0x56>
 8000262:	2480      	movs	r4, #128	; 0x80
 8000264:	2300      	movs	r3, #0
 8000266:	03e4      	lsls	r4, r4, #15
 8000268:	22ff      	movs	r2, #255	; 0xff
 800026a:	e7ac      	b.n	80001c6 <__aeabi_fdiv+0xbe>
 800026c:	2500      	movs	r5, #0
 800026e:	2380      	movs	r3, #128	; 0x80
 8000270:	03db      	lsls	r3, r3, #15
 8000272:	421c      	tst	r4, r3
 8000274:	d028      	beq.n	80002c8 <__aeabi_fdiv+0x1c0>
 8000276:	421d      	tst	r5, r3
 8000278:	d126      	bne.n	80002c8 <__aeabi_fdiv+0x1c0>
 800027a:	432b      	orrs	r3, r5
 800027c:	025c      	lsls	r4, r3, #9
 800027e:	0a64      	lsrs	r4, r4, #9
 8000280:	4643      	mov	r3, r8
 8000282:	22ff      	movs	r2, #255	; 0xff
 8000284:	e79f      	b.n	80001c6 <__aeabi_fdiv+0xbe>
 8000286:	0162      	lsls	r2, r4, #5
 8000288:	016c      	lsls	r4, r5, #5
 800028a:	42a2      	cmp	r2, r4
 800028c:	d224      	bcs.n	80002d8 <__aeabi_fdiv+0x1d0>
 800028e:	211b      	movs	r1, #27
 8000290:	2500      	movs	r5, #0
 8000292:	3e01      	subs	r6, #1
 8000294:	2701      	movs	r7, #1
 8000296:	0010      	movs	r0, r2
 8000298:	006d      	lsls	r5, r5, #1
 800029a:	0052      	lsls	r2, r2, #1
 800029c:	2800      	cmp	r0, #0
 800029e:	db01      	blt.n	80002a4 <__aeabi_fdiv+0x19c>
 80002a0:	4294      	cmp	r4, r2
 80002a2:	d801      	bhi.n	80002a8 <__aeabi_fdiv+0x1a0>
 80002a4:	1b12      	subs	r2, r2, r4
 80002a6:	433d      	orrs	r5, r7
 80002a8:	3901      	subs	r1, #1
 80002aa:	2900      	cmp	r1, #0
 80002ac:	d1f3      	bne.n	8000296 <__aeabi_fdiv+0x18e>
 80002ae:	0014      	movs	r4, r2
 80002b0:	1e62      	subs	r2, r4, #1
 80002b2:	4194      	sbcs	r4, r2
 80002b4:	4325      	orrs	r5, r4
 80002b6:	e76d      	b.n	8000194 <__aeabi_fdiv+0x8c>
 80002b8:	46ba      	mov	sl, r7
 80002ba:	4659      	mov	r1, fp
 80002bc:	0025      	movs	r5, r4
 80002be:	4653      	mov	r3, sl
 80002c0:	2902      	cmp	r1, #2
 80002c2:	d000      	beq.n	80002c6 <__aeabi_fdiv+0x1be>
 80002c4:	e761      	b.n	800018a <__aeabi_fdiv+0x82>
 80002c6:	e77c      	b.n	80001c2 <__aeabi_fdiv+0xba>
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	03db      	lsls	r3, r3, #15
 80002cc:	431c      	orrs	r4, r3
 80002ce:	0264      	lsls	r4, r4, #9
 80002d0:	0a64      	lsrs	r4, r4, #9
 80002d2:	003b      	movs	r3, r7
 80002d4:	22ff      	movs	r2, #255	; 0xff
 80002d6:	e776      	b.n	80001c6 <__aeabi_fdiv+0xbe>
 80002d8:	1b12      	subs	r2, r2, r4
 80002da:	211a      	movs	r1, #26
 80002dc:	2501      	movs	r5, #1
 80002de:	e7d9      	b.n	8000294 <__aeabi_fdiv+0x18c>
 80002e0:	369e      	adds	r6, #158	; 0x9e
 80002e2:	002a      	movs	r2, r5
 80002e4:	40b5      	lsls	r5, r6
 80002e6:	002c      	movs	r4, r5
 80002e8:	40c2      	lsrs	r2, r0
 80002ea:	1e65      	subs	r5, r4, #1
 80002ec:	41ac      	sbcs	r4, r5
 80002ee:	4314      	orrs	r4, r2
 80002f0:	0762      	lsls	r2, r4, #29
 80002f2:	d004      	beq.n	80002fe <__aeabi_fdiv+0x1f6>
 80002f4:	220f      	movs	r2, #15
 80002f6:	4022      	ands	r2, r4
 80002f8:	2a04      	cmp	r2, #4
 80002fa:	d000      	beq.n	80002fe <__aeabi_fdiv+0x1f6>
 80002fc:	3404      	adds	r4, #4
 80002fe:	0162      	lsls	r2, r4, #5
 8000300:	d403      	bmi.n	800030a <__aeabi_fdiv+0x202>
 8000302:	01a4      	lsls	r4, r4, #6
 8000304:	0a64      	lsrs	r4, r4, #9
 8000306:	2200      	movs	r2, #0
 8000308:	e75d      	b.n	80001c6 <__aeabi_fdiv+0xbe>
 800030a:	2201      	movs	r2, #1
 800030c:	2400      	movs	r4, #0
 800030e:	e75a      	b.n	80001c6 <__aeabi_fdiv+0xbe>
 8000310:	2480      	movs	r4, #128	; 0x80
 8000312:	03e4      	lsls	r4, r4, #15
 8000314:	432c      	orrs	r4, r5
 8000316:	0264      	lsls	r4, r4, #9
 8000318:	0a64      	lsrs	r4, r4, #9
 800031a:	22ff      	movs	r2, #255	; 0xff
 800031c:	e753      	b.n	80001c6 <__aeabi_fdiv+0xbe>
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	08000e4c 	.word	0x08000e4c
 8000324:	f7ffffff 	.word	0xf7ffffff
 8000328:	08000e8c 	.word	0x08000e8c

0800032c <__aeabi_i2f>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	2800      	cmp	r0, #0
 8000330:	d03d      	beq.n	80003ae <__aeabi_i2f+0x82>
 8000332:	17c3      	asrs	r3, r0, #31
 8000334:	18c5      	adds	r5, r0, r3
 8000336:	405d      	eors	r5, r3
 8000338:	0fc4      	lsrs	r4, r0, #31
 800033a:	0028      	movs	r0, r5
 800033c:	f000 f840 	bl	80003c0 <__clzsi2>
 8000340:	229e      	movs	r2, #158	; 0x9e
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	2a96      	cmp	r2, #150	; 0x96
 8000346:	dc07      	bgt.n	8000358 <__aeabi_i2f+0x2c>
 8000348:	b2d2      	uxtb	r2, r2
 800034a:	2808      	cmp	r0, #8
 800034c:	dd33      	ble.n	80003b6 <__aeabi_i2f+0x8a>
 800034e:	3808      	subs	r0, #8
 8000350:	4085      	lsls	r5, r0
 8000352:	0268      	lsls	r0, r5, #9
 8000354:	0a40      	lsrs	r0, r0, #9
 8000356:	e023      	b.n	80003a0 <__aeabi_i2f+0x74>
 8000358:	2a99      	cmp	r2, #153	; 0x99
 800035a:	dd0b      	ble.n	8000374 <__aeabi_i2f+0x48>
 800035c:	2305      	movs	r3, #5
 800035e:	0029      	movs	r1, r5
 8000360:	1a1b      	subs	r3, r3, r0
 8000362:	40d9      	lsrs	r1, r3
 8000364:	0003      	movs	r3, r0
 8000366:	331b      	adds	r3, #27
 8000368:	409d      	lsls	r5, r3
 800036a:	002b      	movs	r3, r5
 800036c:	1e5d      	subs	r5, r3, #1
 800036e:	41ab      	sbcs	r3, r5
 8000370:	4319      	orrs	r1, r3
 8000372:	000d      	movs	r5, r1
 8000374:	2805      	cmp	r0, #5
 8000376:	dd01      	ble.n	800037c <__aeabi_i2f+0x50>
 8000378:	1f43      	subs	r3, r0, #5
 800037a:	409d      	lsls	r5, r3
 800037c:	002b      	movs	r3, r5
 800037e:	490f      	ldr	r1, [pc, #60]	; (80003bc <__aeabi_i2f+0x90>)
 8000380:	400b      	ands	r3, r1
 8000382:	076e      	lsls	r6, r5, #29
 8000384:	d009      	beq.n	800039a <__aeabi_i2f+0x6e>
 8000386:	260f      	movs	r6, #15
 8000388:	4035      	ands	r5, r6
 800038a:	2d04      	cmp	r5, #4
 800038c:	d005      	beq.n	800039a <__aeabi_i2f+0x6e>
 800038e:	3304      	adds	r3, #4
 8000390:	015d      	lsls	r5, r3, #5
 8000392:	d502      	bpl.n	800039a <__aeabi_i2f+0x6e>
 8000394:	229f      	movs	r2, #159	; 0x9f
 8000396:	400b      	ands	r3, r1
 8000398:	1a12      	subs	r2, r2, r0
 800039a:	019b      	lsls	r3, r3, #6
 800039c:	0a58      	lsrs	r0, r3, #9
 800039e:	b2d2      	uxtb	r2, r2
 80003a0:	0240      	lsls	r0, r0, #9
 80003a2:	05d2      	lsls	r2, r2, #23
 80003a4:	0a40      	lsrs	r0, r0, #9
 80003a6:	07e4      	lsls	r4, r4, #31
 80003a8:	4310      	orrs	r0, r2
 80003aa:	4320      	orrs	r0, r4
 80003ac:	bd70      	pop	{r4, r5, r6, pc}
 80003ae:	2400      	movs	r4, #0
 80003b0:	2200      	movs	r2, #0
 80003b2:	2000      	movs	r0, #0
 80003b4:	e7f4      	b.n	80003a0 <__aeabi_i2f+0x74>
 80003b6:	0268      	lsls	r0, r5, #9
 80003b8:	0a40      	lsrs	r0, r0, #9
 80003ba:	e7f1      	b.n	80003a0 <__aeabi_i2f+0x74>
 80003bc:	fbffffff 	.word	0xfbffffff

080003c0 <__clzsi2>:
 80003c0:	211c      	movs	r1, #28
 80003c2:	2301      	movs	r3, #1
 80003c4:	041b      	lsls	r3, r3, #16
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d301      	bcc.n	80003ce <__clzsi2+0xe>
 80003ca:	0c00      	lsrs	r0, r0, #16
 80003cc:	3910      	subs	r1, #16
 80003ce:	0a1b      	lsrs	r3, r3, #8
 80003d0:	4298      	cmp	r0, r3
 80003d2:	d301      	bcc.n	80003d8 <__clzsi2+0x18>
 80003d4:	0a00      	lsrs	r0, r0, #8
 80003d6:	3908      	subs	r1, #8
 80003d8:	091b      	lsrs	r3, r3, #4
 80003da:	4298      	cmp	r0, r3
 80003dc:	d301      	bcc.n	80003e2 <__clzsi2+0x22>
 80003de:	0900      	lsrs	r0, r0, #4
 80003e0:	3904      	subs	r1, #4
 80003e2:	a202      	add	r2, pc, #8	; (adr r2, 80003ec <__clzsi2+0x2c>)
 80003e4:	5c10      	ldrb	r0, [r2, r0]
 80003e6:	1840      	adds	r0, r0, r1
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	02020304 	.word	0x02020304
 80003f0:	01010101 	.word	0x01010101
	...

080003fc <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <SystemInit+0x70>)
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	4b19      	ldr	r3, [pc, #100]	; (800046c <SystemInit+0x70>)
 8000406:	2101      	movs	r1, #1
 8000408:	430a      	orrs	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800040c:	4b17      	ldr	r3, [pc, #92]	; (800046c <SystemInit+0x70>)
 800040e:	685a      	ldr	r2, [r3, #4]
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <SystemInit+0x70>)
 8000412:	4917      	ldr	r1, [pc, #92]	; (8000470 <SystemInit+0x74>)
 8000414:	400a      	ands	r2, r1
 8000416:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <SystemInit+0x70>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <SystemInit+0x70>)
 800041e:	4915      	ldr	r1, [pc, #84]	; (8000474 <SystemInit+0x78>)
 8000420:	400a      	ands	r2, r1
 8000422:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <SystemInit+0x70>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <SystemInit+0x70>)
 800042a:	4913      	ldr	r1, [pc, #76]	; (8000478 <SystemInit+0x7c>)
 800042c:	400a      	ands	r2, r1
 800042e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <SystemInit+0x70>)
 8000432:	685a      	ldr	r2, [r3, #4]
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <SystemInit+0x70>)
 8000436:	4911      	ldr	r1, [pc, #68]	; (800047c <SystemInit+0x80>)
 8000438:	400a      	ands	r2, r1
 800043a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800043c:	4b0b      	ldr	r3, [pc, #44]	; (800046c <SystemInit+0x70>)
 800043e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <SystemInit+0x70>)
 8000442:	210f      	movs	r1, #15
 8000444:	438a      	bics	r2, r1
 8000446:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <SystemInit+0x70>)
 800044a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <SystemInit+0x70>)
 800044e:	490c      	ldr	r1, [pc, #48]	; (8000480 <SystemInit+0x84>)
 8000450:	400a      	ands	r2, r1
 8000452:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <SystemInit+0x70>)
 8000456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <SystemInit+0x70>)
 800045a:	2101      	movs	r1, #1
 800045c:	438a      	bics	r2, r1
 800045e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000460:	4b02      	ldr	r3, [pc, #8]	; (800046c <SystemInit+0x70>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	08ffb80c 	.word	0x08ffb80c
 8000474:	fef6ffff 	.word	0xfef6ffff
 8000478:	fffbffff 	.word	0xfffbffff
 800047c:	ffc0ffff 	.word	0xffc0ffff
 8000480:	fffffeec 	.word	0xfffffeec

08000484 <main>:

#include <mpu9250_UsrLvl.h>
#include <sys/_stdint.h>
#include <malloc.h>

int main(void) {
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0

	errorCode err=BeginMPU9250();
 800048a:	1dfc      	adds	r4, r7, #7
 800048c:	f000 f852 	bl	8000534 <BeginMPU9250>
 8000490:	0003      	movs	r3, r0
 8000492:	7023      	strb	r3, [r4, #0]
	Vector3D *v=malloc(sizeof(Vector3D));
 8000494:	200c      	movs	r0, #12
 8000496:	f000 fc51 	bl	8000d3c <malloc>
 800049a:	0003      	movs	r3, r0
 800049c:	603b      	str	r3, [r7, #0]
	err|=SetupAccelBandwidthAndRate(ACCEL_BW_21Hz_Rate_1kHz);
 800049e:	2004      	movs	r0, #4
 80004a0:	f000 faf2 	bl	8000a88 <SetupAccelBandwidthAndRate>
 80004a4:	0003      	movs	r3, r0
 80004a6:	0019      	movs	r1, r3
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	1dfa      	adds	r2, r7, #7
 80004ac:	7812      	ldrb	r2, [r2, #0]
 80004ae:	430a      	orrs	r2, r1
 80004b0:	701a      	strb	r2, [r3, #0]
	err|=SetupGyroBandwidthAndRate(GYRO_BW_8800Hz_Rate_32kHz);
 80004b2:	2008      	movs	r0, #8
 80004b4:	f000 fb7e 	bl	8000bb4 <SetupGyroBandwidthAndRate>
 80004b8:	0003      	movs	r3, r0
 80004ba:	0019      	movs	r1, r3
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	1dfa      	adds	r2, r7, #7
 80004c0:	7812      	ldrb	r2, [r2, #0]
 80004c2:	430a      	orrs	r2, r1
 80004c4:	701a      	strb	r2, [r3, #0]
	for(;;){
		err|=GetAccelMeas(v);
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 faf5 	bl	8000ab8 <GetAccelMeas>
 80004ce:	0003      	movs	r3, r0
 80004d0:	0019      	movs	r1, r3
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	1dfa      	adds	r2, r7, #7
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	430a      	orrs	r2, r1
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	e7f3      	b.n	80004c6 <main+0x42>

080004de <delay_smart_ms>:
 *      Author: vitaliy2034
 */

#include <mpu9250_RegLvl.h>

void delay_smart_ms(uint32_t ms){
 80004de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e0:	b085      	sub	sp, #20
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
	//TODO: write proper delay function
	//Here is example for stm32f030(you may change it)
	for(uint64_t i=0;i<ms*600 ;i++){
 80004e6:	2100      	movs	r1, #0
 80004e8:	2200      	movs	r2, #0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	60fa      	str	r2, [r7, #12]
 80004ee:	e008      	b.n	8000502 <delay_smart_ms+0x24>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	68b9      	ldr	r1, [r7, #8]
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	2501      	movs	r5, #1
 80004f8:	2600      	movs	r6, #0
 80004fa:	1949      	adds	r1, r1, r5
 80004fc:	4172      	adcs	r2, r6
 80004fe:	60b9      	str	r1, [r7, #8]
 8000500:	60fa      	str	r2, [r7, #12]
 8000502:	6879      	ldr	r1, [r7, #4]
 8000504:	000a      	movs	r2, r1
 8000506:	0092      	lsls	r2, r2, #2
 8000508:	1852      	adds	r2, r2, r1
 800050a:	0111      	lsls	r1, r2, #4
 800050c:	1a89      	subs	r1, r1, r2
 800050e:	00ca      	lsls	r2, r1, #3
 8000510:	0011      	movs	r1, r2
 8000512:	000a      	movs	r2, r1
 8000514:	0013      	movs	r3, r2
 8000516:	2200      	movs	r2, #0
 8000518:	0014      	movs	r4, r2
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	42a2      	cmp	r2, r4
 800051e:	d3e7      	bcc.n	80004f0 <delay_smart_ms+0x12>
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	42a2      	cmp	r2, r4
 8000524:	d102      	bne.n	800052c <delay_smart_ms+0x4e>
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	429a      	cmp	r2, r3
 800052a:	d3e1      	bcc.n	80004f0 <delay_smart_ms+0x12>
		__NOP();
	}
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	b005      	add	sp, #20
 8000532:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000534 <BeginMPU9250>:

errorCode BeginMPU9250(){
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
	/*Enable clocking and reset */
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; //enable clocking of GPІО
 800053a:	4bab      	ldr	r3, [pc, #684]	; (80007e8 <BeginMPU9250+0x2b4>)
 800053c:	695a      	ldr	r2, [r3, #20]
 800053e:	4baa      	ldr	r3, [pc, #680]	; (80007e8 <BeginMPU9250+0x2b4>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0289      	lsls	r1, r1, #10
 8000544:	430a      	orrs	r2, r1
 8000546:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;	//enable clocking of SPI
 8000548:	4ba7      	ldr	r3, [pc, #668]	; (80007e8 <BeginMPU9250+0x2b4>)
 800054a:	699a      	ldr	r2, [r3, #24]
 800054c:	4ba6      	ldr	r3, [pc, #664]	; (80007e8 <BeginMPU9250+0x2b4>)
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	0149      	lsls	r1, r1, #5
 8000552:	430a      	orrs	r2, r1
 8000554:	619a      	str	r2, [r3, #24]

	RCC->AHBRSTR|= RCC_AHBRSTR_GPIOARST;//Reset GPIO
 8000556:	4ba4      	ldr	r3, [pc, #656]	; (80007e8 <BeginMPU9250+0x2b4>)
 8000558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800055a:	4ba3      	ldr	r3, [pc, #652]	; (80007e8 <BeginMPU9250+0x2b4>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0289      	lsls	r1, r1, #10
 8000560:	430a      	orrs	r2, r1
 8000562:	629a      	str	r2, [r3, #40]	; 0x28
	RCC->APB2RSTR|= RCC_APB2RSTR_SPI1RST;//Reset SPI
 8000564:	4ba0      	ldr	r3, [pc, #640]	; (80007e8 <BeginMPU9250+0x2b4>)
 8000566:	68da      	ldr	r2, [r3, #12]
 8000568:	4b9f      	ldr	r3, [pc, #636]	; (80007e8 <BeginMPU9250+0x2b4>)
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	0149      	lsls	r1, r1, #5
 800056e:	430a      	orrs	r2, r1
 8000570:	60da      	str	r2, [r3, #12]
	RCC->AHBRSTR&= ~(RCC_AHBRSTR_GPIOARST);
 8000572:	4b9d      	ldr	r3, [pc, #628]	; (80007e8 <BeginMPU9250+0x2b4>)
 8000574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000576:	4b9c      	ldr	r3, [pc, #624]	; (80007e8 <BeginMPU9250+0x2b4>)
 8000578:	499c      	ldr	r1, [pc, #624]	; (80007ec <BeginMPU9250+0x2b8>)
 800057a:	400a      	ands	r2, r1
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
	RCC->APB2RSTR&= ~(RCC_APB2RSTR_SPI1RST);
 800057e:	4b9a      	ldr	r3, [pc, #616]	; (80007e8 <BeginMPU9250+0x2b4>)
 8000580:	68da      	ldr	r2, [r3, #12]
 8000582:	4b99      	ldr	r3, [pc, #612]	; (80007e8 <BeginMPU9250+0x2b4>)
 8000584:	499a      	ldr	r1, [pc, #616]	; (80007f0 <BeginMPU9250+0x2bc>)
 8000586:	400a      	ands	r2, r1
 8000588:	60da      	str	r2, [r3, #12]
	/*Configure GPIO*/
	GPIOA->MODER |= //Configure GPIO to  OUT
 800058a:	2390      	movs	r3, #144	; 0x90
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	2390      	movs	r3, #144	; 0x90
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	21a9      	movs	r1, #169	; 0xa9
 8000596:	0209      	lsls	r1, r1, #8
 8000598:	430a      	orrs	r2, r1
 800059a:	601a      	str	r2, [r3, #0]
			GPIO_MODER_MODER4_0 |//NSS
			//Configure GPIO to  AF
			GPIO_MODER_MODER5_1 | //SCK
			GPIO_MODER_MODER6_1 | //MISO
			GPIO_MODER_MODER7_1;  //MOSI
	GPIOA->OSPEEDR|=GPIO_OSPEEDER_OSPEEDR4;//speed choose NSS(MAX)
 800059c:	2390      	movs	r3, #144	; 0x90
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	2390      	movs	r3, #144	; 0x90
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	21c0      	movs	r1, #192	; 0xc0
 80005a8:	0089      	lsls	r1, r1, #2
 80005aa:	430a      	orrs	r2, r1
 80005ac:	609a      	str	r2, [r3, #8]

	SPI1->CR2 = 0x7 << SPI_CR2_DS_Pos |	//Data size
 80005ae:	4b91      	ldr	r3, [pc, #580]	; (80007f4 <BeginMPU9250+0x2c0>)
 80005b0:	22b8      	movs	r2, #184	; 0xb8
 80005b2:	0152      	lsls	r2, r2, #5
 80005b4:	605a      	str	r2, [r3, #4]
			SPI_CR2_FRXTH;	//fifo rx

	CS_OFF;
 80005b6:	2390      	movs	r3, #144	; 0x90
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	2210      	movs	r2, #16
 80005bc:	619a      	str	r2, [r3, #24]
	SPI1->CR1 = SPI_CR1_MSTR | //Master mode
 80005be:	4b8d      	ldr	r3, [pc, #564]	; (80007f4 <BeginMPU9250+0x2c0>)
 80005c0:	4a8d      	ldr	r2, [pc, #564]	; (80007f8 <BeginMPU9250+0x2c4>)
 80005c2:	601a      	str	r2, [r3, #0]
			SPI_CR1_CPHA |	//CPHA=1
			SPI_CR1_CPOL |	//CPOL=1
			SPI_CR1_SPE;

	uint8_t recive;//buffer
	errorCode err=WriteRegisterMPU9250_Polling(PWR_MGMT_1,128);//Reset device
 80005c4:	1dfc      	adds	r4, r7, #7
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	206b      	movs	r0, #107	; 0x6b
 80005ca:	f000 f9f5 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 80005ce:	0003      	movs	r3, r0
 80005d0:	7023      	strb	r3, [r4, #0]
	delay_smart_ms(120);
 80005d2:	2078      	movs	r0, #120	; 0x78
 80005d4:	f7ff ff83 	bl	80004de <delay_smart_ms>
	err|=ReadRegisterMPU9250_Polling(WHO_AM_I_MPU9250,&recive);
 80005d8:	1dbb      	adds	r3, r7, #6
 80005da:	0019      	movs	r1, r3
 80005dc:	2075      	movs	r0, #117	; 0x75
 80005de:	f000 f90d 	bl	80007fc <ReadRegisterMPU9250_Polling>
 80005e2:	0003      	movs	r3, r0
 80005e4:	0019      	movs	r1, r3
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	1dfa      	adds	r2, r7, #7
 80005ea:	7812      	ldrb	r2, [r2, #0]
 80005ec:	430a      	orrs	r2, r1
 80005ee:	701a      	strb	r2, [r3, #0]
	if(recive == 0x71|| recive ==0x73){
 80005f0:	1dbb      	adds	r3, r7, #6
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b71      	cmp	r3, #113	; 0x71
 80005f6:	d004      	beq.n	8000602 <BeginMPU9250+0xce>
 80005f8:	1dbb      	adds	r3, r7, #6
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b73      	cmp	r3, #115	; 0x73
 80005fe:	d000      	beq.n	8000602 <BeginMPU9250+0xce>
 8000600:	e0ce      	b.n	80007a0 <BeginMPU9250+0x26c>
		err|= WriteRegisterMPU9250_Polling(PWR_MGMT_1,0x01);
 8000602:	2101      	movs	r1, #1
 8000604:	206b      	movs	r0, #107	; 0x6b
 8000606:	f000 f9d7 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 800060a:	0003      	movs	r3, r0
 800060c:	0019      	movs	r1, r3
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	1dfa      	adds	r2, r7, #7
 8000612:	7812      	ldrb	r2, [r2, #0]
 8000614:	430a      	orrs	r2, r1
 8000616:	701a      	strb	r2, [r3, #0]
		/*MPU9250`s I2C MASTER block configure to read/write from AK8963 then read AK8963_WHO_AM_I register*/
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_ADDR,0xC|128);//I2C address of AK8963 is 0xC.to read, 7 bit must be set
 8000618:	218c      	movs	r1, #140	; 0x8c
 800061a:	2025      	movs	r0, #37	; 0x25
 800061c:	f000 f9cc 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000620:	0003      	movs	r3, r0
 8000622:	0019      	movs	r1, r3
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	1dfa      	adds	r2, r7, #7
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	430a      	orrs	r2, r1
 800062c:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_REG,AK8963_WHO_AM_I);//address in AK8963 from where mpu9250 start reading
 800062e:	2100      	movs	r1, #0
 8000630:	2026      	movs	r0, #38	; 0x26
 8000632:	f000 f9c1 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000636:	0003      	movs	r3, r0
 8000638:	0019      	movs	r1, r3
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	1dfa      	adds	r2, r7, #7
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	430a      	orrs	r2, r1
 8000642:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(I2C_MST_CTRL,64);//enable delay the data ready interrupt until external sensor data is loaded - [6] bit
 8000644:	2140      	movs	r1, #64	; 0x40
 8000646:	2024      	movs	r0, #36	; 0x24
 8000648:	f000 f9b6 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 800064c:	0003      	movs	r3, r0
 800064e:	0019      	movs	r1, r3
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	1dfa      	adds	r2, r7, #7
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	430a      	orrs	r2, r1
 8000658:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(I2C_MST_DELAY_CTRL,128);//Delays shadowing of external sensor data until all data is received - [7] bit
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	2067      	movs	r0, #103	; 0x67
 800065e:	f000 f9ab 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000662:	0003      	movs	r3, r0
 8000664:	0019      	movs	r1, r3
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	1dfa      	adds	r2, r7, #7
 800066a:	7812      	ldrb	r2, [r2, #0]
 800066c:	430a      	orrs	r2, r1
 800066e:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_CTRL,128|1);//Enable slave 0 - [7] bit, Number of bytes to be read - [3:0] bits
 8000670:	2181      	movs	r1, #129	; 0x81
 8000672:	2027      	movs	r0, #39	; 0x27
 8000674:	f000 f9a0 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000678:	0003      	movs	r3, r0
 800067a:	0019      	movs	r1, r3
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	1dfa      	adds	r2, r7, #7
 8000680:	7812      	ldrb	r2, [r2, #0]
 8000682:	430a      	orrs	r2, r1
 8000684:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(USER_CTRL,32);//Enable I2C Master of mpu9250
 8000686:	2120      	movs	r1, #32
 8000688:	206a      	movs	r0, #106	; 0x6a
 800068a:	f000 f995 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 800068e:	0003      	movs	r3, r0
 8000690:	0019      	movs	r1, r3
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	1dfa      	adds	r2, r7, #7
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	430a      	orrs	r2, r1
 800069a:	701a      	strb	r2, [r3, #0]
		delay_smart_ms(5);
 800069c:	2005      	movs	r0, #5
 800069e:	f7ff ff1e 	bl	80004de <delay_smart_ms>
		err|=ReadRegisterMPU9250_Polling(EXT_SENS_DATA_00,&recive);//read AK8963_WHO_AM_I
 80006a2:	1dbb      	adds	r3, r7, #6
 80006a4:	0019      	movs	r1, r3
 80006a6:	2049      	movs	r0, #73	; 0x49
 80006a8:	f000 f8a8 	bl	80007fc <ReadRegisterMPU9250_Polling>
 80006ac:	0003      	movs	r3, r0
 80006ae:	0019      	movs	r1, r3
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	1dfa      	adds	r2, r7, #7
 80006b4:	7812      	ldrb	r2, [r2, #0]
 80006b6:	430a      	orrs	r2, r1
 80006b8:	701a      	strb	r2, [r3, #0]
		if(recive != 0x48)
 80006ba:	1dbb      	adds	r3, r7, #6
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b48      	cmp	r3, #72	; 0x48
 80006c0:	d005      	beq.n	80006ce <BeginMPU9250+0x19a>
			return err|ERR_NOT_CONN_AK8963;
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2208      	movs	r2, #8
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	e087      	b.n	80007de <BeginMPU9250+0x2aa>
		/*configure AK8963 to 'continuous mode 2(100Hz)'*/
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_CTRL,0);//disable slave 0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2027      	movs	r0, #39	; 0x27
 80006d2:	f000 f971 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 80006d6:	0003      	movs	r3, r0
 80006d8:	0019      	movs	r1, r3
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	1dfa      	adds	r2, r7, #7
 80006de:	7812      	ldrb	r2, [r2, #0]
 80006e0:	430a      	orrs	r2, r1
 80006e2:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_REG,AK8963_CNTL1);//address in AK8963 from where mpu9250 start writing
 80006e4:	210a      	movs	r1, #10
 80006e6:	2026      	movs	r0, #38	; 0x26
 80006e8:	f000 f966 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 80006ec:	0003      	movs	r3, r0
 80006ee:	0019      	movs	r1, r3
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	1dfa      	adds	r2, r7, #7
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_ADDR,0xC);//I2C address of AK8963 is 0xC.to write, 7 bit must be cleared
 80006fa:	210c      	movs	r1, #12
 80006fc:	2025      	movs	r0, #37	; 0x25
 80006fe:	f000 f95b 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000702:	0003      	movs	r3, r0
 8000704:	0019      	movs	r1, r3
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	1dfa      	adds	r2, r7, #7
 800070a:	7812      	ldrb	r2, [r2, #0]
 800070c:	430a      	orrs	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_DO,22);//Set continuous mode 2, 16 bit mode
 8000710:	2116      	movs	r1, #22
 8000712:	2063      	movs	r0, #99	; 0x63
 8000714:	f000 f950 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000718:	0003      	movs	r3, r0
 800071a:	0019      	movs	r1, r3
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	1dfa      	adds	r2, r7, #7
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	430a      	orrs	r2, r1
 8000724:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_CTRL,128|1);//Enable slave 0 - [7] bit, Number of bytes to be written - [3:0] bits
 8000726:	2181      	movs	r1, #129	; 0x81
 8000728:	2027      	movs	r0, #39	; 0x27
 800072a:	f000 f945 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 800072e:	0003      	movs	r3, r0
 8000730:	0019      	movs	r1, r3
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	1dfa      	adds	r2, r7, #7
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	430a      	orrs	r2, r1
 800073a:	701a      	strb	r2, [r3, #0]
		delay_smart_ms(20);
 800073c:	2014      	movs	r0, #20
 800073e:	f7ff fece 	bl	80004de <delay_smart_ms>

		/*configure MPU9250 to read from AK8963_XOUT_L to AK8963_ST2*/
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_CTRL,0);//disable slave 0
 8000742:	2100      	movs	r1, #0
 8000744:	2027      	movs	r0, #39	; 0x27
 8000746:	f000 f937 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 800074a:	0003      	movs	r3, r0
 800074c:	0019      	movs	r1, r3
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	1dfa      	adds	r2, r7, #7
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	430a      	orrs	r2, r1
 8000756:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_ADDR,0xC|128);//I2C address of AK8963 is 0xC.to read, 7 bit must be set
 8000758:	218c      	movs	r1, #140	; 0x8c
 800075a:	2025      	movs	r0, #37	; 0x25
 800075c:	f000 f92c 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000760:	0003      	movs	r3, r0
 8000762:	0019      	movs	r1, r3
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	1dfa      	adds	r2, r7, #7
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	430a      	orrs	r2, r1
 800076c:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_REG,AK8963_XOUT_L);//address in AK8963 from where mpu9250 start reading
 800076e:	2103      	movs	r1, #3
 8000770:	2026      	movs	r0, #38	; 0x26
 8000772:	f000 f921 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000776:	0003      	movs	r3, r0
 8000778:	0019      	movs	r1, r3
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	1dfa      	adds	r2, r7, #7
 800077e:	7812      	ldrb	r2, [r2, #0]
 8000780:	430a      	orrs	r2, r1
 8000782:	701a      	strb	r2, [r3, #0]
		err|=WriteRegisterMPU9250_Polling(I2C_SLV0_CTRL,128|7);//Enable slave 0 - [7] bit, Number of bytes to be read - [3:0] bits
 8000784:	2187      	movs	r1, #135	; 0x87
 8000786:	2027      	movs	r0, #39	; 0x27
 8000788:	f000 f916 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 800078c:	0003      	movs	r3, r0
 800078e:	0019      	movs	r1, r3
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	1dfa      	adds	r2, r7, #7
 8000794:	7812      	ldrb	r2, [r2, #0]
 8000796:	430a      	orrs	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
		return err;
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	e01e      	b.n	80007de <BeginMPU9250+0x2aa>
	}
	RCC->AHBRSTR|= RCC_AHBRSTR_GPIOARST;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <BeginMPU9250+0x2b4>)
 80007a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <BeginMPU9250+0x2b4>)
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	0289      	lsls	r1, r1, #10
 80007aa:	430a      	orrs	r2, r1
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
	RCC->APB2RSTR|= RCC_APB2RSTR_SPI1RST;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <BeginMPU9250+0x2b4>)
 80007b0:	68da      	ldr	r2, [r3, #12]
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <BeginMPU9250+0x2b4>)
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	0149      	lsls	r1, r1, #5
 80007b8:	430a      	orrs	r2, r1
 80007ba:	60da      	str	r2, [r3, #12]
	RCC->AHBRSTR&= ~(RCC_AHBRSTR_GPIOARST);
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <BeginMPU9250+0x2b4>)
 80007be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <BeginMPU9250+0x2b4>)
 80007c2:	490a      	ldr	r1, [pc, #40]	; (80007ec <BeginMPU9250+0x2b8>)
 80007c4:	400a      	ands	r2, r1
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
	RCC->APB2RSTR&= ~(RCC_APB2RSTR_SPI1RST);
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <BeginMPU9250+0x2b4>)
 80007ca:	68da      	ldr	r2, [r3, #12]
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <BeginMPU9250+0x2b4>)
 80007ce:	4908      	ldr	r1, [pc, #32]	; (80007f0 <BeginMPU9250+0x2bc>)
 80007d0:	400a      	ands	r2, r1
 80007d2:	60da      	str	r2, [r3, #12]
	return err|ERR_NOT_CONN_MPU9250;
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2201      	movs	r2, #1
 80007da:	4313      	orrs	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
}
 80007de:	0018      	movs	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b003      	add	sp, #12
 80007e4:	bd90      	pop	{r4, r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40021000 	.word	0x40021000
 80007ec:	fffdffff 	.word	0xfffdffff
 80007f0:	ffffefff 	.word	0xffffefff
 80007f4:	40013000 	.word	0x40013000
 80007f8:	00000357 	.word	0x00000357

080007fc <ReadRegisterMPU9250_Polling>:

//
errorCode ReadRegisterMPU9250_Polling(uint8_t RegAdress,uint8_t *Val){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	0002      	movs	r2, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	701a      	strb	r2, [r3, #0]
	while ((SPI1->SR & SPI_SR_BSY));
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ReadRegisterMPU9250_Polling+0x94>)
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	4013      	ands	r3, r2
 8000814:	d1fa      	bne.n	800080c <ReadRegisterMPU9250_Polling+0x10>
	if(SPI1->SR & SPI_SR_RXNE)
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <ReadRegisterMPU9250_Polling+0x94>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	d001      	beq.n	8000824 <ReadRegisterMPU9250_Polling+0x28>
		return ERR_RXFIFO_NOT_EMPTY_STM32;
 8000820:	2304      	movs	r3, #4
 8000822:	e031      	b.n	8000888 <ReadRegisterMPU9250_Polling+0x8c>
	if(RegAdress>126||RegAdress<0)
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b7e      	cmp	r3, #126	; 0x7e
 800082a:	d901      	bls.n	8000830 <ReadRegisterMPU9250_Polling+0x34>
		return ERR_WRONG_PARAM_MPU9250;
 800082c:	2302      	movs	r3, #2
 800082e:	e02b      	b.n	8000888 <ReadRegisterMPU9250_Polling+0x8c>
	RegAdress|=128;
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	1dfa      	adds	r2, r7, #7
 8000834:	7812      	ldrb	r2, [r2, #0]
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	4249      	negs	r1, r1
 800083a:	430a      	orrs	r2, r1
 800083c:	701a      	strb	r2, [r3, #0]
	CS_ON;
 800083e:	2390      	movs	r3, #144	; 0x90
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	0352      	lsls	r2, r2, #13
 8000846:	619a      	str	r2, [r3, #24]
	*(uint8_t*)&SPI1->DR=RegAdress;
 8000848:	4a12      	ldr	r2, [pc, #72]	; (8000894 <ReadRegisterMPU9250_Polling+0x98>)
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	7013      	strb	r3, [r2, #0]
	while (!(SPI1->SR & SPI_SR_RXNE));
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <ReadRegisterMPU9250_Polling+0x94>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	d0fa      	beq.n	8000852 <ReadRegisterMPU9250_Polling+0x56>
	*Val=*(uint8_t*)&SPI1->DR;
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <ReadRegisterMPU9250_Polling+0x98>)
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	701a      	strb	r2, [r3, #0]
	*(uint8_t*)&(SPI1->DR) = 0;
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <ReadRegisterMPU9250_Polling+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
	while (!(SPI1->SR & SPI_SR_RXNE));
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ReadRegisterMPU9250_Polling+0x94>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	2201      	movs	r2, #1
 8000872:	4013      	ands	r3, r2
 8000874:	d0fa      	beq.n	800086c <ReadRegisterMPU9250_Polling+0x70>
	CS_OFF;
 8000876:	2390      	movs	r3, #144	; 0x90
 8000878:	05db      	lsls	r3, r3, #23
 800087a:	2210      	movs	r2, #16
 800087c:	619a      	str	r2, [r3, #24]
	*Val=*(uint8_t*)&(SPI1->DR);
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <ReadRegisterMPU9250_Polling+0x98>)
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	701a      	strb	r2, [r3, #0]
	return OK_MPU9250;
 8000886:	2300      	movs	r3, #0
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	b002      	add	sp, #8
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40013000 	.word	0x40013000
 8000894:	4001300c 	.word	0x4001300c

08000898 <ReadRegistersMPU9250_Polling>:
errorCode ReadRegistersMPU9250_Polling(uint8_t RegAdress, uint8_t Cnt0fBytes,uint8_t *Buffer,bool Increm){
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	0004      	movs	r4, r0
 80008a0:	0008      	movs	r0, r1
 80008a2:	603a      	str	r2, [r7, #0]
 80008a4:	0019      	movs	r1, r3
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	1c22      	adds	r2, r4, #0
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	1dbb      	adds	r3, r7, #6
 80008ae:	1c02      	adds	r2, r0, #0
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	1d7b      	adds	r3, r7, #5
 80008b4:	1c0a      	adds	r2, r1, #0
 80008b6:	701a      	strb	r2, [r3, #0]
	while ((SPI1->SR & SPI_SR_BSY));
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <ReadRegistersMPU9250_Polling+0x118>)
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	4013      	ands	r3, r2
 80008c2:	d1fa      	bne.n	80008ba <ReadRegistersMPU9250_Polling+0x22>
	if(SPI1->SR & SPI_SR_RXNE)
 80008c4:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <ReadRegistersMPU9250_Polling+0x118>)
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	2201      	movs	r2, #1
 80008ca:	4013      	ands	r3, r2
 80008cc:	d001      	beq.n	80008d2 <ReadRegistersMPU9250_Polling+0x3a>
		return ERR_RXFIFO_NOT_EMPTY_STM32;
 80008ce:	2304      	movs	r3, #4
 80008d0:	e06a      	b.n	80009a8 <ReadRegistersMPU9250_Polling+0x110>
	if(RegAdress>126||RegAdress<0)
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b7e      	cmp	r3, #126	; 0x7e
 80008d8:	d901      	bls.n	80008de <ReadRegistersMPU9250_Polling+0x46>
		return ERR_WRONG_PARAM_MPU9250;
 80008da:	2302      	movs	r3, #2
 80008dc:	e064      	b.n	80009a8 <ReadRegistersMPU9250_Polling+0x110>
	if(Increm&&(Cnt0fBytes+RegAdress>127)){
 80008de:	1d7b      	adds	r3, r7, #5
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d008      	beq.n	80008f8 <ReadRegistersMPU9250_Polling+0x60>
 80008e6:	1dbb      	adds	r3, r7, #6
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	18d3      	adds	r3, r2, r3
 80008f0:	2b7f      	cmp	r3, #127	; 0x7f
 80008f2:	dd01      	ble.n	80008f8 <ReadRegistersMPU9250_Polling+0x60>
		return ERR_WRONG_PARAM_MPU9250;
 80008f4:	2302      	movs	r3, #2
 80008f6:	e057      	b.n	80009a8 <ReadRegistersMPU9250_Polling+0x110>
	}else{
		if(Increm==false&&(RegAdress-Cnt0fBytes)<=0)
 80008f8:	1d7b      	adds	r3, r7, #5
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2201      	movs	r2, #1
 80008fe:	4053      	eors	r3, r2
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d008      	beq.n	8000918 <ReadRegistersMPU9250_Polling+0x80>
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	1dbb      	adds	r3, r7, #6
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	dc01      	bgt.n	8000918 <ReadRegistersMPU9250_Polling+0x80>
			return ERR_WRONG_PARAM_MPU9250;
 8000914:	2302      	movs	r3, #2
 8000916:	e047      	b.n	80009a8 <ReadRegistersMPU9250_Polling+0x110>
	}
	RegAdress|=128;
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	1dfa      	adds	r2, r7, #7
 800091c:	7812      	ldrb	r2, [r2, #0]
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	4249      	negs	r1, r1
 8000922:	430a      	orrs	r2, r1
 8000924:	701a      	strb	r2, [r3, #0]
	for(;Cnt0fBytes>0;Cnt0fBytes--,Buffer++){
 8000926:	e03a      	b.n	800099e <ReadRegistersMPU9250_Polling+0x106>
		CS_ON;
 8000928:	2390      	movs	r3, #144	; 0x90
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	0352      	lsls	r2, r2, #13
 8000930:	619a      	str	r2, [r3, #24]
		*(uint8_t*)&SPI1->DR=RegAdress;
 8000932:	4a20      	ldr	r2, [pc, #128]	; (80009b4 <ReadRegistersMPU9250_Polling+0x11c>)
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	7013      	strb	r3, [r2, #0]
		while (!(SPI1->SR & SPI_SR_RXNE));
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <ReadRegistersMPU9250_Polling+0x118>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	2201      	movs	r2, #1
 8000942:	4013      	ands	r3, r2
 8000944:	d0fa      	beq.n	800093c <ReadRegistersMPU9250_Polling+0xa4>
		*Buffer=*(uint8_t*)&SPI1->DR;
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <ReadRegistersMPU9250_Polling+0x11c>)
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	701a      	strb	r2, [r3, #0]
		*(uint8_t*)&(SPI1->DR) = 0;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <ReadRegistersMPU9250_Polling+0x11c>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
		while (!(SPI1->SR & SPI_SR_RXNE));
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <ReadRegistersMPU9250_Polling+0x118>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2201      	movs	r2, #1
 800095c:	4013      	ands	r3, r2
 800095e:	d0fa      	beq.n	8000956 <ReadRegistersMPU9250_Polling+0xbe>
		CS_OFF;
 8000960:	2390      	movs	r3, #144	; 0x90
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	2210      	movs	r2, #16
 8000966:	619a      	str	r2, [r3, #24]
		*Buffer=*(uint8_t*)&(SPI1->DR);
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <ReadRegistersMPU9250_Polling+0x11c>)
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	701a      	strb	r2, [r3, #0]
		(Increm)?RegAdress++:RegAdress--;
 8000970:	1d7b      	adds	r3, r7, #5
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d005      	beq.n	8000984 <ReadRegistersMPU9250_Polling+0xec>
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781a      	ldrb	r2, [r3, #0]
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	3201      	adds	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	e004      	b.n	800098e <ReadRegistersMPU9250_Polling+0xf6>
 8000984:	1dfb      	adds	r3, r7, #7
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	3a01      	subs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
	for(;Cnt0fBytes>0;Cnt0fBytes--,Buffer++){
 800098e:	1dbb      	adds	r3, r7, #6
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	1dbb      	adds	r3, r7, #6
 8000994:	3a01      	subs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	1dbb      	adds	r3, r7, #6
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1c0      	bne.n	8000928 <ReadRegistersMPU9250_Polling+0x90>
	}
	return OK_MPU9250;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b003      	add	sp, #12
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	40013000 	.word	0x40013000
 80009b4:	4001300c 	.word	0x4001300c

080009b8 <WriteRegisterMPU9250_Polling>:

errorCode WriteRegisterMPU9250_Polling(uint8_t RegAdress,uint8_t Data){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	0002      	movs	r2, r0
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	1dbb      	adds	r3, r7, #6
 80009c6:	1c0a      	adds	r2, r1, #0
 80009c8:	701a      	strb	r2, [r3, #0]
	//TODO: write proper write function
	//Here is example for stm32f030(you may change it)
	while ((SPI1->SR & SPI_SR_BSY));
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <WriteRegisterMPU9250_Polling+0x84>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	4013      	ands	r3, r2
 80009d4:	d1fa      	bne.n	80009cc <WriteRegisterMPU9250_Polling+0x14>
	if(SPI1->SR & SPI_SR_RXNE)
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <WriteRegisterMPU9250_Polling+0x84>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2201      	movs	r2, #1
 80009dc:	4013      	ands	r3, r2
 80009de:	d001      	beq.n	80009e4 <WriteRegisterMPU9250_Polling+0x2c>
		return ERR_RXFIFO_NOT_EMPTY_STM32;
 80009e0:	2304      	movs	r3, #4
 80009e2:	e027      	b.n	8000a34 <WriteRegisterMPU9250_Polling+0x7c>

	if(RegAdress>126||RegAdress<0)
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b7e      	cmp	r3, #126	; 0x7e
 80009ea:	d901      	bls.n	80009f0 <WriteRegisterMPU9250_Polling+0x38>
		return ERR_WRONG_PARAM_MPU9250;
 80009ec:	2302      	movs	r3, #2
 80009ee:	e021      	b.n	8000a34 <WriteRegisterMPU9250_Polling+0x7c>

	CS_ON;//Chip Select pin of mpu9250 is set to low
 80009f0:	2390      	movs	r3, #144	; 0x90
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	0352      	lsls	r2, r2, #13
 80009f8:	619a      	str	r2, [r3, #24]
	*(uint8_t*)&SPI1->DR=RegAdress;
 80009fa:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <WriteRegisterMPU9250_Polling+0x88>)
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	7013      	strb	r3, [r2, #0]
	*(uint8_t*)&SPI1->DR=Data;
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <WriteRegisterMPU9250_Polling+0x88>)
 8000a04:	1dbb      	adds	r3, r7, #6
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	7013      	strb	r3, [r2, #0]
	while (SPI1->SR & SPI_SR_BSY);
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <WriteRegisterMPU9250_Polling+0x84>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	4013      	ands	r3, r2
 8000a14:	d1fa      	bne.n	8000a0c <WriteRegisterMPU9250_Polling+0x54>
	CS_OFF;//Chip Select pin of mpu9250 is set to low
 8000a16:	2390      	movs	r3, #144	; 0x90
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	619a      	str	r2, [r3, #24]
	while(SPI1->SR&SPI_SR_RXNE)
 8000a1e:	e003      	b.n	8000a28 <WriteRegisterMPU9250_Polling+0x70>
		Data=*(uint8_t*) &(SPI1->DR);
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <WriteRegisterMPU9250_Polling+0x88>)
 8000a22:	1dbb      	adds	r3, r7, #6
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	701a      	strb	r2, [r3, #0]
	while(SPI1->SR&SPI_SR_RXNE)
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <WriteRegisterMPU9250_Polling+0x84>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4013      	ands	r3, r2
 8000a30:	d1f6      	bne.n	8000a20 <WriteRegisterMPU9250_Polling+0x68>
	return OK_MPU9250;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40013000 	.word	0x40013000
 8000a40:	4001300c 	.word	0x4001300c

08000a44 <ReadRawOutAccelMPU9250>:
	int16_t temp=RawGyroVector->x;
	RawGyroVector->x=RawGyroVector->z;
	RawGyroVector->z=temp;
	return err;
}
inline errorCode ReadRawOutAccelMPU9250( VectorRaw *RawAccelVector){
 8000a44:	b5b0      	push	{r4, r5, r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	errorCode err = ReadRegistersMPU9250_Polling(ACCEL_ZOUT_L, 6, (uint8_t*)RawAccelVector,false);
 8000a4c:	250f      	movs	r5, #15
 8000a4e:	197c      	adds	r4, r7, r5
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	2300      	movs	r3, #0
 8000a54:	2106      	movs	r1, #6
 8000a56:	2040      	movs	r0, #64	; 0x40
 8000a58:	f7ff ff1e 	bl	8000898 <ReadRegistersMPU9250_Polling>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	7023      	strb	r3, [r4, #0]
	int16_t temp=RawAccelVector->x;
 8000a60:	210c      	movs	r1, #12
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	8812      	ldrh	r2, [r2, #0]
 8000a68:	801a      	strh	r2, [r3, #0]
	RawAccelVector->x=RawAccelVector->z;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	5e9a      	ldrsh	r2, [r3, r2]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	801a      	strh	r2, [r3, #0]
	RawAccelVector->z=temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	187a      	adds	r2, r7, r1
 8000a78:	8812      	ldrh	r2, [r2, #0]
 8000a7a:	809a      	strh	r2, [r3, #4]
	return err;
 8000a7c:	197b      	adds	r3, r7, r5
 8000a7e:	781b      	ldrb	r3, [r3, #0]
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b004      	add	sp, #16
 8000a86:	bdb0      	pop	{r4, r5, r7, pc}

08000a88 <SetupAccelBandwidthAndRate>:
		return ERR_WRONG_PARAM_MPU9250;
	cfgAccelScale=Scale;//save to global variable Scale
	return WriteRegisterMPU9250_Polling(ACCEL_CONFIG, Scale);//write Scale to Accelerometer
}

errorCode SetupAccelBandwidthAndRate(AccelCfg OutRateParam){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	701a      	strb	r2, [r3, #0]
	if(OutRateParam>ACCEL_BW_1046Hz_Rate_4kHz||OutRateParam<ACCEL_BW_218Hz_Rate_1kHz)//check is parameters wrong
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	d901      	bls.n	8000aa0 <SetupAccelBandwidthAndRate+0x18>
		return ERR_WRONG_PARAM_MPU9250;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	e006      	b.n	8000aae <SetupAccelBandwidthAndRate+0x26>
	return WriteRegisterMPU9250_Polling(ACCEL_CONFIG2, OutRateParam);//write Parameter to Accelerometer
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	201d      	movs	r0, #29
 8000aa8:	f7ff ff86 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000aac:	0003      	movs	r3, r0
}
 8000aae:	0018      	movs	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <GetAccelMeas>:
	if(OutRateParam>ACCEL_LP_500Hz||OutRateParam<ACCEL_LP_0Hz26)//check is parameters wrong
		return ERR_WRONG_PARAM_MPU9250;
	return WriteRegisterMPU9250_Polling(LP_ACCEL_ODR, OutRateParam)|WriteRegisterMPU9250_Polling(ACCEL_CONFIG2, OutRateParam);
}

errorCode GetAccelMeas(Vector3D * AccelMeas){
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	VectorRaw Mes;
	errorCode err=ReadRawOutAccelMPU9250(&Mes);
 8000ac0:	250f      	movs	r5, #15
 8000ac2:	197c      	adds	r4, r7, r5
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff ffbb 	bl	8000a44 <ReadRawOutAccelMPU9250>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	7023      	strb	r3, [r4, #0]
	if(err)
 8000ad2:	197b      	adds	r3, r7, r5
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <GetAccelMeas+0x2a>
		return err;
 8000ada:	230f      	movs	r3, #15
 8000adc:	18fb      	adds	r3, r7, r3
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	e060      	b.n	8000ba4 <GetAccelMeas+0xec>
	AccelMeas->x=(float)Mes.x/(16.368f/(1<<(cfgAccelScale>>3)));
 8000ae2:	2508      	movs	r5, #8
 8000ae4:	197b      	adds	r3, r7, r5
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	5e9b      	ldrsh	r3, [r3, r2]
 8000aea:	0018      	movs	r0, r3
 8000aec:	f7ff fc1e 	bl	800032c <__aeabi_i2f>
 8000af0:	1c04      	adds	r4, r0, #0
 8000af2:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <GetAccelMeas+0xf4>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	08db      	lsrs	r3, r3, #3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	001a      	movs	r2, r3
 8000afc:	2301      	movs	r3, #1
 8000afe:	4093      	lsls	r3, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fc13 	bl	800032c <__aeabi_i2f>
 8000b06:	1c03      	adds	r3, r0, #0
 8000b08:	1c19      	adds	r1, r3, #0
 8000b0a:	4829      	ldr	r0, [pc, #164]	; (8000bb0 <GetAccelMeas+0xf8>)
 8000b0c:	f7ff fafc 	bl	8000108 <__aeabi_fdiv>
 8000b10:	1c03      	adds	r3, r0, #0
 8000b12:	1c19      	adds	r1, r3, #0
 8000b14:	1c20      	adds	r0, r4, #0
 8000b16:	f7ff faf7 	bl	8000108 <__aeabi_fdiv>
 8000b1a:	1c03      	adds	r3, r0, #0
 8000b1c:	1c1a      	adds	r2, r3, #0
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
	AccelMeas->y=(float)Mes.y/(16.368f/(1<<(cfgAccelScale>>3)));
 8000b22:	197b      	adds	r3, r7, r5
 8000b24:	2202      	movs	r2, #2
 8000b26:	5e9b      	ldrsh	r3, [r3, r2]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff fbff 	bl	800032c <__aeabi_i2f>
 8000b2e:	1c04      	adds	r4, r0, #0
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <GetAccelMeas+0xf4>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	08db      	lsrs	r3, r3, #3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	4093      	lsls	r3, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff fbf4 	bl	800032c <__aeabi_i2f>
 8000b44:	1c03      	adds	r3, r0, #0
 8000b46:	1c19      	adds	r1, r3, #0
 8000b48:	4819      	ldr	r0, [pc, #100]	; (8000bb0 <GetAccelMeas+0xf8>)
 8000b4a:	f7ff fadd 	bl	8000108 <__aeabi_fdiv>
 8000b4e:	1c03      	adds	r3, r0, #0
 8000b50:	1c19      	adds	r1, r3, #0
 8000b52:	1c20      	adds	r0, r4, #0
 8000b54:	f7ff fad8 	bl	8000108 <__aeabi_fdiv>
 8000b58:	1c03      	adds	r3, r0, #0
 8000b5a:	1c1a      	adds	r2, r3, #0
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	605a      	str	r2, [r3, #4]
	AccelMeas->z=(float)Mes.z/(16.368f/(1<<(cfgAccelScale>>3)));
 8000b60:	197b      	adds	r3, r7, r5
 8000b62:	2204      	movs	r2, #4
 8000b64:	5e9b      	ldrsh	r3, [r3, r2]
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff fbe0 	bl	800032c <__aeabi_i2f>
 8000b6c:	1c04      	adds	r4, r0, #0
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <GetAccelMeas+0xf4>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	001a      	movs	r2, r3
 8000b78:	2301      	movs	r3, #1
 8000b7a:	4093      	lsls	r3, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff fbd5 	bl	800032c <__aeabi_i2f>
 8000b82:	1c03      	adds	r3, r0, #0
 8000b84:	1c19      	adds	r1, r3, #0
 8000b86:	480a      	ldr	r0, [pc, #40]	; (8000bb0 <GetAccelMeas+0xf8>)
 8000b88:	f7ff fabe 	bl	8000108 <__aeabi_fdiv>
 8000b8c:	1c03      	adds	r3, r0, #0
 8000b8e:	1c19      	adds	r1, r3, #0
 8000b90:	1c20      	adds	r0, r4, #0
 8000b92:	f7ff fab9 	bl	8000108 <__aeabi_fdiv>
 8000b96:	1c03      	adds	r3, r0, #0
 8000b98:	1c1a      	adds	r2, r3, #0
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
	return err;
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b004      	add	sp, #16
 8000baa:	bdb0      	pop	{r4, r5, r7, pc}
 8000bac:	20000080 	.word	0x20000080
 8000bb0:	4182f1aa 	.word	0x4182f1aa

08000bb4 <SetupGyroBandwidthAndRate>:
		return ERR_WRONG_PARAM_MPU9250;
	cfgGyroScale&=~(GYRO_FS_2000DPS);//this two commands need to write only Scale parameter, and don`t change another bits, like Fchoice_b
	cfgGyroScale|=Scale;
	return WriteRegisterMPU9250_Polling(GYRO_CONFIG, cfgGyroScale);//write Scale to Gyroscope
}
errorCode SetupGyroBandwidthAndRate(GyroCfg OutRateParam){
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	701a      	strb	r2, [r3, #0]
	if(OutRateParam<GYRO_BW_250Hz_Rate_8kHz||GYRO_BW_8800Hz_Rate_32kHz<OutRateParam)//check is parameters wrong
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d901      	bls.n	8000bcc <SetupGyroBandwidthAndRate+0x18>
			return ERR_WRONG_PARAM_MPU9250;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	e030      	b.n	8000c2e <SetupGyroBandwidthAndRate+0x7a>
		//cfgGyroScale=OutRateParam;
		cfgGyroScale&=(~3);//this command clear Fchoise_b in buffer
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <SetupGyroBandwidthAndRate+0x84>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	4393      	bics	r3, r2
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <SetupGyroBandwidthAndRate+0x84>)
 8000bd8:	701a      	strb	r2, [r3, #0]
		if(OutRateParam<GYRO_BW_8800Hz_Rate_32kHz){
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	d811      	bhi.n	8000c06 <SetupGyroBandwidthAndRate+0x52>
			return WriteRegisterMPU9250_Polling(MPU_CONFIG, OutRateParam)|WriteRegisterMPU9250_Polling(GYRO_CONFIG, cfgGyroScale);
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	0019      	movs	r1, r3
 8000be8:	201a      	movs	r0, #26
 8000bea:	f7ff fee5 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	001c      	movs	r4, r3
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <SetupGyroBandwidthAndRate+0x84>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	201b      	movs	r0, #27
 8000bfa:	f7ff fedd 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	4323      	orrs	r3, r4
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	e013      	b.n	8000c2e <SetupGyroBandwidthAndRate+0x7a>
		}
		else{
			OutRateParam=OutRateParam>>3;
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	1dfa      	adds	r2, r7, #7
 8000c0a:	7812      	ldrb	r2, [r2, #0]
 8000c0c:	08d2      	lsrs	r2, r2, #3
 8000c0e:	701a      	strb	r2, [r3, #0]
			cfgGyroScale|=OutRateParam;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <SetupGyroBandwidthAndRate+0x84>)
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <SetupGyroBandwidthAndRate+0x84>)
 8000c1e:	701a      	strb	r2, [r3, #0]
			return WriteRegisterMPU9250_Polling(GYRO_CONFIG, cfgGyroScale);
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SetupGyroBandwidthAndRate+0x84>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	0019      	movs	r1, r3
 8000c26:	201b      	movs	r0, #27
 8000c28:	f7ff fec6 	bl	80009b8 <WriteRegisterMPU9250_Polling>
 8000c2c:	0003      	movs	r3, r0
		}
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b003      	add	sp, #12
 8000c34:	bd90      	pop	{r4, r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20000081 	.word	0x20000081

08000c3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x50>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x16>
		heap_end = &end;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <_sbrk+0x50>)
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <_sbrk+0x54>)
 8000c50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <_sbrk+0x50>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <_sbrk+0x50>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	18d3      	adds	r3, r2, r3
 8000c60:	466a      	mov	r2, sp
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d907      	bls.n	8000c76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c66:	f000 f83f 	bl	8000ce8 <__errno>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	220c      	movs	r2, #12
 8000c6e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	425b      	negs	r3, r3
 8000c74:	e006      	b.n	8000c84 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <_sbrk+0x50>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	18d2      	adds	r2, r2, r3
 8000c7e:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <_sbrk+0x50>)
 8000c80:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b004      	add	sp, #16
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000084 	.word	0x20000084
 8000c90:	20000098 	.word	0x20000098

08000c94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9a:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <LoopForever+0xe>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ce0 <LoopForever+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cbe:	f7ff fb9d 	bl	80003fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cc2:	f000 f817 	bl	8000cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc6:	f7ff fbdd 	bl	8000484 <main>

08000cca <LoopForever>:

LoopForever:
    b LoopForever
 8000cca:	e7fe      	b.n	8000cca <LoopForever>
  ldr   r0, =_estack
 8000ccc:	20000fff 	.word	0x20000fff
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000cd8:	08000ed4 	.word	0x08000ed4
  ldr r2, =_sbss
 8000cdc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ce0:	20000094 	.word	0x20000094

08000ce4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>
	...

08000ce8 <__errno>:
 8000ce8:	4b01      	ldr	r3, [pc, #4]	; (8000cf0 <__errno+0x8>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	4770      	bx	lr
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000000 	.word	0x20000000

08000cf4 <__libc_init_array>:
 8000cf4:	b570      	push	{r4, r5, r6, lr}
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	4d0c      	ldr	r5, [pc, #48]	; (8000d2c <__libc_init_array+0x38>)
 8000cfa:	4c0d      	ldr	r4, [pc, #52]	; (8000d30 <__libc_init_array+0x3c>)
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	10a4      	asrs	r4, r4, #2
 8000d00:	42a6      	cmp	r6, r4
 8000d02:	d109      	bne.n	8000d18 <__libc_init_array+0x24>
 8000d04:	2600      	movs	r6, #0
 8000d06:	f000 f895 	bl	8000e34 <_init>
 8000d0a:	4d0a      	ldr	r5, [pc, #40]	; (8000d34 <__libc_init_array+0x40>)
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	; (8000d38 <__libc_init_array+0x44>)
 8000d0e:	1b64      	subs	r4, r4, r5
 8000d10:	10a4      	asrs	r4, r4, #2
 8000d12:	42a6      	cmp	r6, r4
 8000d14:	d105      	bne.n	8000d22 <__libc_init_array+0x2e>
 8000d16:	bd70      	pop	{r4, r5, r6, pc}
 8000d18:	00b3      	lsls	r3, r6, #2
 8000d1a:	58eb      	ldr	r3, [r5, r3]
 8000d1c:	4798      	blx	r3
 8000d1e:	3601      	adds	r6, #1
 8000d20:	e7ee      	b.n	8000d00 <__libc_init_array+0xc>
 8000d22:	00b3      	lsls	r3, r6, #2
 8000d24:	58eb      	ldr	r3, [r5, r3]
 8000d26:	4798      	blx	r3
 8000d28:	3601      	adds	r6, #1
 8000d2a:	e7f2      	b.n	8000d12 <__libc_init_array+0x1e>
 8000d2c:	08000ecc 	.word	0x08000ecc
 8000d30:	08000ecc 	.word	0x08000ecc
 8000d34:	08000ecc 	.word	0x08000ecc
 8000d38:	08000ed0 	.word	0x08000ed0

08000d3c <malloc>:
 8000d3c:	b510      	push	{r4, lr}
 8000d3e:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <malloc+0x10>)
 8000d40:	0001      	movs	r1, r0
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	f000 f804 	bl	8000d50 <_malloc_r>
 8000d48:	bd10      	pop	{r4, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	20000000 	.word	0x20000000

08000d50 <_malloc_r>:
 8000d50:	2303      	movs	r3, #3
 8000d52:	b570      	push	{r4, r5, r6, lr}
 8000d54:	1ccd      	adds	r5, r1, #3
 8000d56:	439d      	bics	r5, r3
 8000d58:	3508      	adds	r5, #8
 8000d5a:	0006      	movs	r6, r0
 8000d5c:	2d0c      	cmp	r5, #12
 8000d5e:	d21e      	bcs.n	8000d9e <_malloc_r+0x4e>
 8000d60:	250c      	movs	r5, #12
 8000d62:	42a9      	cmp	r1, r5
 8000d64:	d81d      	bhi.n	8000da2 <_malloc_r+0x52>
 8000d66:	0030      	movs	r0, r6
 8000d68:	f000 f862 	bl	8000e30 <__malloc_lock>
 8000d6c:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <_malloc_r+0xb4>)
 8000d6e:	6814      	ldr	r4, [r2, #0]
 8000d70:	0021      	movs	r1, r4
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d119      	bne.n	8000daa <_malloc_r+0x5a>
 8000d76:	4c24      	ldr	r4, [pc, #144]	; (8000e08 <_malloc_r+0xb8>)
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d103      	bne.n	8000d86 <_malloc_r+0x36>
 8000d7e:	0030      	movs	r0, r6
 8000d80:	f000 f844 	bl	8000e0c <_sbrk_r>
 8000d84:	6020      	str	r0, [r4, #0]
 8000d86:	0029      	movs	r1, r5
 8000d88:	0030      	movs	r0, r6
 8000d8a:	f000 f83f 	bl	8000e0c <_sbrk_r>
 8000d8e:	1c43      	adds	r3, r0, #1
 8000d90:	d12b      	bne.n	8000dea <_malloc_r+0x9a>
 8000d92:	230c      	movs	r3, #12
 8000d94:	0030      	movs	r0, r6
 8000d96:	6033      	str	r3, [r6, #0]
 8000d98:	f000 f84b 	bl	8000e32 <__malloc_unlock>
 8000d9c:	e003      	b.n	8000da6 <_malloc_r+0x56>
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	dadf      	bge.n	8000d62 <_malloc_r+0x12>
 8000da2:	230c      	movs	r3, #12
 8000da4:	6033      	str	r3, [r6, #0]
 8000da6:	2000      	movs	r0, #0
 8000da8:	bd70      	pop	{r4, r5, r6, pc}
 8000daa:	680b      	ldr	r3, [r1, #0]
 8000dac:	1b5b      	subs	r3, r3, r5
 8000dae:	d419      	bmi.n	8000de4 <_malloc_r+0x94>
 8000db0:	2b0b      	cmp	r3, #11
 8000db2:	d903      	bls.n	8000dbc <_malloc_r+0x6c>
 8000db4:	600b      	str	r3, [r1, #0]
 8000db6:	18cc      	adds	r4, r1, r3
 8000db8:	6025      	str	r5, [r4, #0]
 8000dba:	e003      	b.n	8000dc4 <_malloc_r+0x74>
 8000dbc:	684b      	ldr	r3, [r1, #4]
 8000dbe:	428c      	cmp	r4, r1
 8000dc0:	d10d      	bne.n	8000dde <_malloc_r+0x8e>
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	0030      	movs	r0, r6
 8000dc6:	f000 f834 	bl	8000e32 <__malloc_unlock>
 8000dca:	0020      	movs	r0, r4
 8000dcc:	2207      	movs	r2, #7
 8000dce:	300b      	adds	r0, #11
 8000dd0:	1d23      	adds	r3, r4, #4
 8000dd2:	4390      	bics	r0, r2
 8000dd4:	1ac3      	subs	r3, r0, r3
 8000dd6:	d0e7      	beq.n	8000da8 <_malloc_r+0x58>
 8000dd8:	425a      	negs	r2, r3
 8000dda:	50e2      	str	r2, [r4, r3]
 8000ddc:	e7e4      	b.n	8000da8 <_malloc_r+0x58>
 8000dde:	6063      	str	r3, [r4, #4]
 8000de0:	000c      	movs	r4, r1
 8000de2:	e7ef      	b.n	8000dc4 <_malloc_r+0x74>
 8000de4:	000c      	movs	r4, r1
 8000de6:	6849      	ldr	r1, [r1, #4]
 8000de8:	e7c3      	b.n	8000d72 <_malloc_r+0x22>
 8000dea:	2303      	movs	r3, #3
 8000dec:	1cc4      	adds	r4, r0, #3
 8000dee:	439c      	bics	r4, r3
 8000df0:	42a0      	cmp	r0, r4
 8000df2:	d0e1      	beq.n	8000db8 <_malloc_r+0x68>
 8000df4:	1a21      	subs	r1, r4, r0
 8000df6:	0030      	movs	r0, r6
 8000df8:	f000 f808 	bl	8000e0c <_sbrk_r>
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d1db      	bne.n	8000db8 <_malloc_r+0x68>
 8000e00:	e7c7      	b.n	8000d92 <_malloc_r+0x42>
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	20000088 	.word	0x20000088
 8000e08:	2000008c 	.word	0x2000008c

08000e0c <_sbrk_r>:
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	b570      	push	{r4, r5, r6, lr}
 8000e10:	4c06      	ldr	r4, [pc, #24]	; (8000e2c <_sbrk_r+0x20>)
 8000e12:	0005      	movs	r5, r0
 8000e14:	0008      	movs	r0, r1
 8000e16:	6023      	str	r3, [r4, #0]
 8000e18:	f7ff ff10 	bl	8000c3c <_sbrk>
 8000e1c:	1c43      	adds	r3, r0, #1
 8000e1e:	d103      	bne.n	8000e28 <_sbrk_r+0x1c>
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d000      	beq.n	8000e28 <_sbrk_r+0x1c>
 8000e26:	602b      	str	r3, [r5, #0]
 8000e28:	bd70      	pop	{r4, r5, r6, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000090 	.word	0x20000090

08000e30 <__malloc_lock>:
 8000e30:	4770      	bx	lr

08000e32 <__malloc_unlock>:
 8000e32:	4770      	bx	lr

08000e34 <_init>:
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e3a:	bc08      	pop	{r3}
 8000e3c:	469e      	mov	lr, r3
 8000e3e:	4770      	bx	lr

08000e40 <_fini>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e46:	bc08      	pop	{r3}
 8000e48:	469e      	mov	lr, r3
 8000e4a:	4770      	bx	lr
